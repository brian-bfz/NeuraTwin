import os
import re
import datetime
def generate_bash_render_commands(base_dir="generated_data", target_case_name="single_push_rope", min_timestamp_str="20250521_184000", output_file="batch_render.sh"):
    """
    Generates a bash script with commands to render videos in batch.
    Args:
        base_dir (str): The base directory where your case data is stored.
        target_case_name (str): The specific case name to filter by.
        min_timestamp_str (str): The minimum timestamp in 'YYYYMMDD_HHMMSS' format.
        output_file (str): The name of the bash script file to generate.
    """
    try:
        min_timestamp = datetime.datetime.strptime(min_timestamp_str, "%Y%m%d_%H%M%S")
    except ValueError:
        print(f"Error: Invalid minimum timestamp format '{min_timestamp_str}'. Expected %Y%m%d_%H%M%S.")
        return
    print(f"Generating bash commands for case: '{target_case_name}'")
    print(f"Filtering for timestamps later than: {min_timestamp_str}")
    print(f"Output will be saved to: {output_file}")
    print("-" * 50)
    commands_to_write = []
    processed_count = 0
    skipped_count = 0
    if not os.path.exists(base_dir):
        print(f"Error: Base directory '{base_dir}' not found.")
        return
    # Regex to match the desired folder structure: {case_name}_{timestamp}
    pattern = re.compile(rf"^{re.escape(target_case_name)}_(\d{{8}}_\d{{6}})$")
    for item_name in os.listdir(base_dir):
        item_path = os.path.join(base_dir, item_name)
        if os.path.isdir(item_path):
            match = pattern.match(item_name)
            if match:
                extracted_timestamp_str = match.group(1)
                try:
                    current_timestamp = datetime.datetime.strptime(extracted_timestamp_str, "%Y%m%d_%H%M%S")
                except ValueError:
                    print(f"Warning: Could not parse timestamp from '{item_name}'. Skipping.")
                    skipped_count += 1
                    continue
                if current_timestamp > min_timestamp:
                    command = f"python v_from_d.py --case_name {target_case_name} --timestamp {extracted_timestamp_str}"
                    commands_to_write.append(command)
                    print(f"Found match: {item_name}")
                    processed_count += 1
                else:
                    print(f"Skipping (older timestamp): {item_name}")
                    skipped_count += 1
            elif item_name != "videos": # Avoid printing for the 'videos' directory itself
                print(f"Skipping (does not match pattern or case name): {item_name}")
                skipped_count += 1
    with open(output_file, 'w') as f:
        f.write("#!/bin/bash\n\n")
        f.write("# This script was auto-generated by generate_render_commands.py\n")
        f.write("# It contains commands to render videos for specific cases and timestamps.\n\n")
        f.write("echo \"Starting batch rendering...\"\n\n")
        if not commands_to_write:
            f.write("echo \"No matching cases found for rendering.\"\n")
        else:
            for cmd in commands_to_write:
                f.write(f"{cmd}\n")
            f.write("\necho \"Batch rendering complete.\"\n")
    print("-" * 50)
    print(f"Generated {processed_count} commands and saved to '{output_file}'.")
    print(f"Skipped {skipped_count} items.")
    print(f"To run the commands, make the script executable: 'chmod +x {output_file}' and then run: './{output_file}'")
if __name__ == "__main__":
    generate_bash_render_commands(
        base_dir="generated_data",
        target_case_name="single_push_rope",
        min_timestamp_str="20250521_184000",
        output_file="batch_render.sh"
    )